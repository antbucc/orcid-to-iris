{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function fetchPublicationsAsXml(orcidId) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$record, _result$record$activi, _result$record$activi2;\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    const works = (result === null || result === void 0 ? void 0 : (_result$record = result[\"record\"]) === null || _result$record === void 0 ? void 0 : (_result$record$activi = _result$record[\"activities-summary\"]) === null || _result$record$activi === void 0 ? void 0 : (_result$record$activi2 = _result$record$activi[\"works\"]) === null || _result$record$activi2 === void 0 ? void 0 : _result$record$activi2[\"group\"]) || [];\n    console.log(\"Parsed Works:\", works); // Debugging\n\n    const publications = works.map(work => {\n      var _summary$title, _summary$title$title, _summary$externalIds, _summary$externalIds$, _summary$externalIds$2, _summary$journalTitl, _summary$publication, _summary$publication$;\n      const summary = work[\"work-summary\"];\n      return {\n        title: (summary === null || summary === void 0 ? void 0 : (_summary$title = summary[\"title\"]) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title[\"title\"]) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title.value) || \"No Title\",\n        authors: \"No Authors\",\n        // Public ORCID data doesn't include authors\n        doi: (summary === null || summary === void 0 ? void 0 : (_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : (_summary$externalIds$ = _summary$externalIds[\"external-id\"]) === null || _summary$externalIds$ === void 0 ? void 0 : (_summary$externalIds$2 = _summary$externalIds$.find(id => id[\"external-id-type\"] === \"doi\")) === null || _summary$externalIds$2 === void 0 ? void 0 : _summary$externalIds$2[\"external-id-value\"]) || \"\",\n        journal: (summary === null || summary === void 0 ? void 0 : (_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl.value) || \"No Journal\",\n        year: (summary === null || summary === void 0 ? void 0 : (_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication.year) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$.value) || \"No Year\",\n        volume: (summary === null || summary === void 0 ? void 0 : summary.volume) || \"\",\n        issue: (summary === null || summary === void 0 ? void 0 : summary.issue) || \"\",\n        pages: (summary === null || summary === void 0 ? void 0 : summary[\"page-range\"]) || \"\",\n        abstract: (summary === null || summary === void 0 ? void 0 : summary[\"short-description\"]) || \"\",\n        publisher: (summary === null || summary === void 0 ? void 0 : summary.publisher) || \"\"\n      };\n    });\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}","map":{"version":3,"names":["parseStringPromise","fetchPublicationsAsXml","orcidId","test","Error","url","headers","Accept","_result$record","_result$record$activi","_result$record$activi2","response","fetch","ok","status","statusText","xml","text","result","explicitArray","works","console","log","publications","map","work","_summary$title","_summary$title$title","_summary$externalIds","_summary$externalIds$","_summary$externalIds$2","_summary$journalTitl","_summary$publication","_summary$publication$","summary","title","value","authors","doi","find","id","journal","year","volume","issue","pages","abstract","publisher","error","message"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function fetchPublicationsAsXml(orcidId) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n  const headers = { Accept: \"application/xml\" };\n\n  try {\n    const response = await fetch(url, { headers });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, { explicitArray: false });\n\n    const works = result?.[\"record\"]?.[\"activities-summary\"]?.[\"works\"]?.[\"group\"] || [];\n    console.log(\"Parsed Works:\", works); // Debugging\n\n    const publications = works.map((work) => {\n      const summary = work[\"work-summary\"];\n      return {\n        title: summary?.[\"title\"]?.[\"title\"]?.value || \"No Title\",\n        authors: \"No Authors\", // Public ORCID data doesn't include authors\n        doi: summary?.[\"external-ids\"]?.[\"external-id\"]?.find((id) => id[\"external-id-type\"] === \"doi\")?.[\"external-id-value\"] || \"\",\n        journal: summary?.[\"journal-title\"]?.value || \"No Journal\",\n        year: summary?.[\"publication-date\"]?.year?.value || \"No Year\",\n        volume: summary?.volume || \"\",\n        issue: summary?.issue || \"\",\n        pages: summary?.[\"page-range\"] || \"\",\n        abstract: summary?.[\"short-description\"] || \"\",\n        publisher: summary?.publisher || \"\",\n      };\n    });\n\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}