{"ast":null,"code":"export async function fetchPublications(orcidId) {\n  const worksUrl = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n  const headers = {\n    Accept: \"application/json\"\n  };\n\n  // Fetch the list of works (work summaries)\n  const response = await fetch(worksUrl, {\n    headers\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch publications from ORCID.\");\n  }\n  const data = await response.json();\n  const publications = [];\n\n  // Iterate through works and fetch detailed info for each\n  for (const group of data.group || []) {\n    const summary = group[\"work-summary\"][0];\n    const workId = summary[\"put-code\"];\n    if (workId) {\n      const workDetailsUrl = `https://pub.orcid.org/v3.0/${orcidId}/work/${workId}`;\n      const detailsResponse = await fetch(workDetailsUrl, {\n        headers\n      });\n      if (detailsResponse.ok) {\n        var _workDetails$contribu, _workDetails$contribu2, _workDetails$title, _workDetails$title$ti, _ids, _ids$externalId, _ids$externalId$find, _workDetails$journal, _workDetails$publicat, _workDetails$publicat2, _workDetails$keywords, _workDetails$keywords2;\n        const workDetails = await detailsResponse.json();\n\n        // Extract relevant fields\n        const authors = ((_workDetails$contribu = workDetails.contributors) === null || _workDetails$contribu === void 0 ? void 0 : (_workDetails$contribu2 = _workDetails$contribu.contributor) === null || _workDetails$contribu2 === void 0 ? void 0 : _workDetails$contribu2.map(contributor => {\n          var _contributor$creditN;\n          return (_contributor$creditN = contributor[\"credit-name\"]) === null || _contributor$creditN === void 0 ? void 0 : _contributor$creditN.value;\n        }).join(\", \")) || \"No Authors\";\n        publications.push({\n          title: ((_workDetails$title = workDetails.title) === null || _workDetails$title === void 0 ? void 0 : (_workDetails$title$ti = _workDetails$title.title) === null || _workDetails$title$ti === void 0 ? void 0 : _workDetails$title$ti.value) || \"No Title\",\n          authors,\n          doi: workDetails.external - ((_ids = ids) === null || _ids === void 0 ? void 0 : (_ids$externalId = _ids[\"external-id\"]) === null || _ids$externalId === void 0 ? void 0 : (_ids$externalId$find = _ids$externalId.find(id => id[\"external-id-type\"] === \"doi\")) === null || _ids$externalId$find === void 0 ? void 0 : _ids$externalId$find[\"external-id-value\"]) || \"\",\n          journal: ((_workDetails$journal = workDetails[\"journal-title\"]) === null || _workDetails$journal === void 0 ? void 0 : _workDetails$journal.value) || \"No Journal\",\n          year: ((_workDetails$publicat = workDetails[\"publication-date\"]) === null || _workDetails$publicat === void 0 ? void 0 : (_workDetails$publicat2 = _workDetails$publicat.year) === null || _workDetails$publicat2 === void 0 ? void 0 : _workDetails$publicat2.value) || \"No Year\",\n          volume: workDetails[\"volume\"] || \"\",\n          issue: workDetails[\"issue\"] || \"\",\n          pages: workDetails[\"page-range\"] || \"\",\n          abstract: workDetails[\"short-description\"] || \"\",\n          publisher: workDetails[\"publisher\"] || \"\",\n          keywords: ((_workDetails$keywords = workDetails[\"keywords\"]) === null || _workDetails$keywords === void 0 ? void 0 : (_workDetails$keywords2 = _workDetails$keywords.keyword) === null || _workDetails$keywords2 === void 0 ? void 0 : _workDetails$keywords2.map(kw => kw.value).join(\", \")) || \"\"\n        });\n      }\n    }\n  }\n  return publications;\n}","map":{"version":3,"names":["fetchPublications","orcidId","worksUrl","headers","Accept","response","fetch","ok","Error","data","json","publications","group","summary","workId","workDetailsUrl","detailsResponse","_workDetails$contribu","_workDetails$contribu2","_workDetails$title","_workDetails$title$ti","_ids","_ids$externalId","_ids$externalId$find","_workDetails$journal","_workDetails$publicat","_workDetails$publicat2","_workDetails$keywords","_workDetails$keywords2","workDetails","authors","contributors","contributor","map","_contributor$creditN","value","join","push","title","doi","external","ids","find","id","journal","year","volume","issue","pages","abstract","publisher","keywords","keyword","kw"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["export async function fetchPublications(orcidId) {\n    const worksUrl = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n    const headers = { Accept: \"application/json\" };\n  \n    // Fetch the list of works (work summaries)\n    const response = await fetch(worksUrl, { headers });\n  \n    if (!response.ok) {\n      throw new Error(\"Failed to fetch publications from ORCID.\");\n    }\n  \n    const data = await response.json();\n    const publications = [];\n  \n    // Iterate through works and fetch detailed info for each\n    for (const group of data.group || []) {\n      const summary = group[\"work-summary\"][0];\n      const workId = summary[\"put-code\"];\n  \n      if (workId) {\n        const workDetailsUrl = `https://pub.orcid.org/v3.0/${orcidId}/work/${workId}`;\n        const detailsResponse = await fetch(workDetailsUrl, { headers });\n  \n        if (detailsResponse.ok) {\n          const workDetails = await detailsResponse.json();\n  \n          // Extract relevant fields\n          const authors = workDetails.contributors?.contributor\n            ?.map((contributor) => contributor[\"credit-name\"]?.value)\n            .join(\", \") || \"No Authors\";\n  \n          publications.push({\n            title: workDetails.title?.title?.value || \"No Title\",\n            authors,\n            doi: workDetails.external-ids?.[\"external-id\"]?.find((id) => id[\"external-id-type\"] === \"doi\")?.[\"external-id-value\"] || \"\",\n            journal: workDetails[\"journal-title\"]?.value || \"No Journal\",\n            year: workDetails[\"publication-date\"]?.year?.value || \"No Year\",\n            volume: workDetails[\"volume\"] || \"\",\n            issue: workDetails[\"issue\"] || \"\",\n            pages: workDetails[\"page-range\"] || \"\",\n            abstract: workDetails[\"short-description\"] || \"\",\n            publisher: workDetails[\"publisher\"] || \"\",\n            keywords: workDetails[\"keywords\"]?.keyword?.map((kw) => kw.value).join(\", \") || \"\",\n          });\n        }\n      }\n    }\n  \n    return publications;\n  }\n  "],"mappings":"AAAA,OAAO,eAAeA,iBAAiBA,CAACC,OAAO,EAAE;EAC7C,MAAMC,QAAQ,GAAG,8BAA8BD,OAAO,QAAQ;EAC9D,MAAME,OAAO,GAAG;IAAEC,MAAM,EAAE;EAAmB,CAAC;;EAE9C;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;IAAEC;EAAQ,CAAC,CAAC;EAEnD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,MAAMC,YAAY,GAAG,EAAE;;EAEvB;EACA,KAAK,MAAMC,KAAK,IAAIH,IAAI,CAACG,KAAK,IAAI,EAAE,EAAE;IACpC,MAAMC,OAAO,GAAGD,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IACxC,MAAME,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;IAElC,IAAIC,MAAM,EAAE;MACV,MAAMC,cAAc,GAAG,8BAA8Bd,OAAO,SAASa,MAAM,EAAE;MAC7E,MAAME,eAAe,GAAG,MAAMV,KAAK,CAACS,cAAc,EAAE;QAAEZ;MAAQ,CAAC,CAAC;MAEhE,IAAIa,eAAe,CAACT,EAAE,EAAE;QAAA,IAAAU,qBAAA,EAAAC,sBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,IAAA,EAAAC,eAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA;QACtB,MAAMC,WAAW,GAAG,MAAMb,eAAe,CAACN,IAAI,CAAC,CAAC;;QAEhD;QACA,MAAMoB,OAAO,GAAG,EAAAb,qBAAA,GAAAY,WAAW,CAACE,YAAY,cAAAd,qBAAA,wBAAAC,sBAAA,GAAxBD,qBAAA,CAA0Be,WAAW,cAAAd,sBAAA,uBAArCA,sBAAA,CACZe,GAAG,CAAED,WAAW;UAAA,IAAAE,oBAAA;UAAA,QAAAA,oBAAA,GAAKF,WAAW,CAAC,aAAa,CAAC,cAAAE,oBAAA,uBAA1BA,oBAAA,CAA4BC,KAAK;QAAA,EAAC,CACxDC,IAAI,CAAC,IAAI,CAAC,KAAI,YAAY;QAE7BzB,YAAY,CAAC0B,IAAI,CAAC;UAChBC,KAAK,EAAE,EAAAnB,kBAAA,GAAAU,WAAW,CAACS,KAAK,cAAAnB,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmBmB,KAAK,cAAAlB,qBAAA,uBAAxBA,qBAAA,CAA0Be,KAAK,KAAI,UAAU;UACpDL,OAAO;UACPS,GAAG,EAAEV,WAAW,CAACW,QAAQ,KAAAnB,IAAA,GAACoB,GAAG,cAAApB,IAAA,wBAAAC,eAAA,GAAHD,IAAA,CAAM,aAAa,CAAC,cAAAC,eAAA,wBAAAC,oBAAA,GAApBD,eAAA,CAAsBoB,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAAC,kBAAkB,CAAC,KAAK,KAAK,CAAC,cAAApB,oBAAA,uBAApEA,oBAAA,CAAuE,mBAAmB,CAAC,KAAI,EAAE;UAC3HqB,OAAO,EAAE,EAAApB,oBAAA,GAAAK,WAAW,CAAC,eAAe,CAAC,cAAAL,oBAAA,uBAA5BA,oBAAA,CAA8BW,KAAK,KAAI,YAAY;UAC5DU,IAAI,EAAE,EAAApB,qBAAA,GAAAI,WAAW,CAAC,kBAAkB,CAAC,cAAAJ,qBAAA,wBAAAC,sBAAA,GAA/BD,qBAAA,CAAiCoB,IAAI,cAAAnB,sBAAA,uBAArCA,sBAAA,CAAuCS,KAAK,KAAI,SAAS;UAC/DW,MAAM,EAAEjB,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE;UACnCkB,KAAK,EAAElB,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE;UACjCmB,KAAK,EAAEnB,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE;UACtCoB,QAAQ,EAAEpB,WAAW,CAAC,mBAAmB,CAAC,IAAI,EAAE;UAChDqB,SAAS,EAAErB,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE;UACzCsB,QAAQ,EAAE,EAAAxB,qBAAA,GAAAE,WAAW,CAAC,UAAU,CAAC,cAAAF,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyByB,OAAO,cAAAxB,sBAAA,uBAAhCA,sBAAA,CAAkCK,GAAG,CAAEoB,EAAE,IAAKA,EAAE,CAAClB,KAAK,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,KAAI;QAClF,CAAC,CAAC;MACJ;IACF;EACF;EAEA,OAAOzB,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}