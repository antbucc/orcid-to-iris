{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function parseXmlToPublications(xml) {\n  const publications = [];\n  try {\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    const works = result[\"record\"][\"activities-summary\"][\"works\"][\"group\"] || [];\n    works.forEach(work => {\n      var _summary$title, _summary$title$title, _summary$externalIds, _summary$externalIds$, _summary$externalIds$2, _summary$journalTitl, _summary$publication, _summary$publication$, _summary$contributors, _summary$contributors2;\n      const summary = work[\"work-summary\"];\n      const title = (summary === null || summary === void 0 ? void 0 : (_summary$title = summary.title) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title.title) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title.value) || \"No Title\";\n      const doi = (summary === null || summary === void 0 ? void 0 : (_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : (_summary$externalIds$ = _summary$externalIds[\"external-id\"]) === null || _summary$externalIds$ === void 0 ? void 0 : (_summary$externalIds$2 = _summary$externalIds$.find(id => id[\"external-id-type\"] === \"doi\")) === null || _summary$externalIds$2 === void 0 ? void 0 : _summary$externalIds$2[\"external-id-value\"]) || \"\";\n      const journal = (summary === null || summary === void 0 ? void 0 : (_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl.value) || \"No Journal\";\n      const year = (summary === null || summary === void 0 ? void 0 : (_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication.year) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$.value) || \"No Year\";\n      const volume = (summary === null || summary === void 0 ? void 0 : summary.volume) || \"\";\n      const issue = (summary === null || summary === void 0 ? void 0 : summary.issue) || \"\";\n      const pages = (summary === null || summary === void 0 ? void 0 : summary[\"page-range\"]) || \"\";\n      const abstract = (summary === null || summary === void 0 ? void 0 : summary[\"short-description\"]) || \"\";\n      const authors = (summary === null || summary === void 0 ? void 0 : (_summary$contributors = summary[\"contributors\"]) === null || _summary$contributors === void 0 ? void 0 : (_summary$contributors2 = _summary$contributors[\"contributor\"]) === null || _summary$contributors2 === void 0 ? void 0 : _summary$contributors2.map(contributor => {\n        var _contributor$creditN;\n        return (_contributor$creditN = contributor[\"credit-name\"]) === null || _contributor$creditN === void 0 ? void 0 : _contributor$creditN.value;\n      }).join(\", \")) || \"No Authors\";\n      const publisher = (summary === null || summary === void 0 ? void 0 : summary.publisher) || \"\";\n      publications.push({\n        title,\n        authors,\n        doi,\n        journal,\n        year,\n        volume,\n        issue,\n        pages,\n        abstract,\n        publisher\n      });\n    });\n    return publications;\n  } catch (error) {\n    console.error(\"Error parsing XML:\", error.message);\n    throw new Error(\"Failed to parse XML.\");\n  }\n}","map":{"version":3,"names":["parseStringPromise","parseXmlToPublications","xml","publications","result","explicitArray","works","forEach","work","_summary$title","_summary$title$title","_summary$externalIds","_summary$externalIds$","_summary$externalIds$2","_summary$journalTitl","_summary$publication","_summary$publication$","_summary$contributors","_summary$contributors2","summary","title","value","doi","find","id","journal","year","volume","issue","pages","abstract","authors","map","contributor","_contributor$creditN","join","publisher","push","error","console","message","Error"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/utils/xmlTransformer.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function parseXmlToPublications(xml) {\n  const publications = [];\n\n  try {\n    const result = await parseStringPromise(xml, { explicitArray: false });\n    const works = result[\"record\"][\"activities-summary\"][\"works\"][\"group\"] || [];\n\n    works.forEach((work) => {\n      const summary = work[\"work-summary\"];\n      const title = summary?.title?.title?.value || \"No Title\";\n      const doi = summary?.[\"external-ids\"]?.[\"external-id\"]?.find((id) => id[\"external-id-type\"] === \"doi\")?.[\"external-id-value\"] || \"\";\n      const journal = summary?.[\"journal-title\"]?.value || \"No Journal\";\n      const year = summary?.[\"publication-date\"]?.year?.value || \"No Year\";\n      const volume = summary?.volume || \"\";\n      const issue = summary?.issue || \"\";\n      const pages = summary?.[\"page-range\"] || \"\";\n      const abstract = summary?.[\"short-description\"] || \"\";\n      const authors = summary?.[\"contributors\"]?.[\"contributor\"]\n        ?.map((contributor) => contributor[\"credit-name\"]?.value)\n        .join(\", \") || \"No Authors\";\n      const publisher = summary?.publisher || \"\";\n\n      publications.push({\n        title,\n        authors,\n        doi,\n        journal,\n        year,\n        volume,\n        issue,\n        pages,\n        abstract,\n        publisher,\n      });\n    });\n\n    return publications;\n  } catch (error) {\n    console.error(\"Error parsing XML:\", error.message);\n    throw new Error(\"Failed to parse XML.\");\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}