{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function fetchPublicationsAsXml(orcidId) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$activitiesSu, _result$activitiesSu$;\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    console.log(\"Fetched XML:\", xml); // Debugging\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    console.log(\"PIPPO: \" + JSON.stringify(result));\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesSu = result[\"activities-summary\"]) === null || _result$activitiesSu === void 0 ? void 0 : (_result$activitiesSu$ = _result$activitiesSu[\"works\"]) === null || _result$activitiesSu$ === void 0 ? void 0 : _result$activitiesSu$[\"group\"];\n    if (!works || works.length === 0) {\n      console.error(\"No works found for this ORCID ID.\");\n    } else {\n      console.log(\"Parsed Works:\", works);\n    }\n    const publications = works.map(work => {\n      var _summary$title, _summary$title$title, _summary$externalIds, _summary$externalIds$, _summary$externalIds$2, _summary$journalTitl, _summary$publication, _summary$publication$;\n      const summary = Array.isArray(work[\"work-summary\"]) ? work[\"work-summary\"][0] : work[\"work-summary\"];\n      return {\n        title: (summary === null || summary === void 0 ? void 0 : (_summary$title = summary[\"title\"]) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title[\"title\"]) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title.value) || \"No Title\",\n        authors: \"No Authors\",\n        // Public ORCID data doesn't include authors\n        doi: (summary === null || summary === void 0 ? void 0 : (_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : (_summary$externalIds$ = _summary$externalIds[\"external-id\"]) === null || _summary$externalIds$ === void 0 ? void 0 : (_summary$externalIds$2 = _summary$externalIds$.find(id => id[\"external-id-type\"] === \"doi\")) === null || _summary$externalIds$2 === void 0 ? void 0 : _summary$externalIds$2[\"external-id-value\"]) || \"\",\n        journal: (summary === null || summary === void 0 ? void 0 : (_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl.value) || \"No Journal\",\n        year: (summary === null || summary === void 0 ? void 0 : (_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication.year) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$.value) || \"No Year\",\n        volume: (summary === null || summary === void 0 ? void 0 : summary.volume) || \"\",\n        issue: (summary === null || summary === void 0 ? void 0 : summary.issue) || \"\",\n        pages: (summary === null || summary === void 0 ? void 0 : summary[\"page-range\"]) || \"\",\n        abstract: (summary === null || summary === void 0 ? void 0 : summary[\"short-description\"]) || \"\",\n        publisher: (summary === null || summary === void 0 ? void 0 : summary.publisher) || \"\"\n      };\n    });\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}","map":{"version":3,"names":["parseStringPromise","fetchPublicationsAsXml","orcidId","test","Error","url","headers","Accept","_result$activitiesSu","_result$activitiesSu$","response","fetch","ok","status","statusText","xml","text","console","log","result","explicitArray","JSON","stringify","works","length","error","publications","map","work","_summary$title","_summary$title$title","_summary$externalIds","_summary$externalIds$","_summary$externalIds$2","_summary$journalTitl","_summary$publication","_summary$publication$","summary","Array","isArray","title","value","authors","doi","find","id","journal","year","volume","issue","pages","abstract","publisher","message"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function fetchPublicationsAsXml(orcidId) {\n    if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n        throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n    }\n\n    const url = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n    const headers = { Accept: \"application/xml\" };\n\n    try {\n        const response = await fetch(url, { headers });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n        }\n\n        const xml = await response.text();\n        console.log(\"Fetched XML:\", xml); // Debugging\n        const result = await parseStringPromise(xml, { explicitArray: false });\n        console.log(\"PIPPO: \" + JSON.stringify(result));\n\n        const works = result?.[\"activities-summary\"]?.[\"works\"]?.[\"group\"];\n        if (!works || works.length === 0) {\n          console.error(\"No works found for this ORCID ID.\");\n        } else {\n          console.log(\"Parsed Works:\", works);\n        }\n        \n\n\n        const publications = works.map((work) => {\n            const summary = Array.isArray(work[\"work-summary\"]) ? work[\"work-summary\"][0] : work[\"work-summary\"];\n\n            return {\n                title: summary?.[\"title\"]?.[\"title\"]?.value || \"No Title\",\n                authors: \"No Authors\", // Public ORCID data doesn't include authors\n                doi: summary?.[\"external-ids\"]?.[\"external-id\"]?.find((id) => id[\"external-id-type\"] === \"doi\")?.[\"external-id-value\"] || \"\",\n                journal: summary?.[\"journal-title\"]?.value || \"No Journal\",\n                year: summary?.[\"publication-date\"]?.year?.value || \"No Year\",\n                volume: summary?.volume || \"\",\n                issue: summary?.issue || \"\",\n                pages: summary?.[\"page-range\"] || \"\",\n                abstract: summary?.[\"short-description\"] || \"\",\n                publisher: summary?.publisher || \"\",\n            };\n        });\n\n        return publications;\n    } catch (error) {\n        console.error(\"Error fetching or parsing XML:\", error.message);\n        throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}