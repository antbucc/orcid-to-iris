{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function fetchPublicationsFromXml(orcidId) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$activitiesAc, _result$activitiesAc$;\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesAc = result[\"activities:activities-summary\"]) === null || _result$activitiesAc === void 0 ? void 0 : (_result$activitiesAc$ = _result$activitiesAc[\"activities:works\"]) === null || _result$activitiesAc$ === void 0 ? void 0 : _result$activitiesAc$[\"activities:group\"];\n    if (!works) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n    const publications = Array.isArray(works) ? works.flatMap(workGroup => parseWorkGroup(workGroup)) : parseWorkGroup(works);\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}","map":{"version":3,"names":["parseStringPromise","fetchPublicationsFromXml","orcidId","test","Error","url","headers","Accept","_result$activitiesAc","_result$activitiesAc$","response","fetch","ok","status","statusText","xml","text","result","explicitArray","works","console","warn","publications","Array","isArray","flatMap","workGroup","parseWorkGroup","error","message"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function fetchPublicationsFromXml(orcidId) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = { Accept: \"application/xml\" };\n\n  try {\n    const response = await fetch(url, { headers });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, { explicitArray: false });\n\n    const works = result?.[\"activities:activities-summary\"]?.[\"activities:works\"]?.[\"activities:group\"];\n    if (!works) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n\n    const publications = Array.isArray(works)\n      ? works.flatMap((workGroup) => parseWorkGroup(workGroup))\n      : parseWorkGroup(works);\n\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,QAAQ;AAE3C,OAAO,eAAeC,wBAAwBA,CAACC,OAAO,EAAE;EACtD,IAAI,CAACA,OAAO,IAAI,CAAC,2BAA2B,CAACC,IAAI,CAACD,OAAO,CAAC,EAAE;IAC1D,MAAM,IAAIE,KAAK,CAAC,qEAAqE,CAAC;EACxF;EAEA,MAAMC,GAAG,GAAG,8BAA8BH,OAAO,aAAa;EAC9D,MAAMI,OAAO,GAAG;IAAEC,MAAM,EAAE;EAAkB,CAAC;EAE7C,IAAI;IAAA,IAAAC,oBAAA,EAAAC,qBAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;MAAEC;IAAQ,CAAC,CAAC;IAE9C,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIR,KAAK,CAAC,wBAAwBM,QAAQ,CAACG,MAAM,MAAMH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACrF;IAEA,MAAMC,GAAG,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACjC,MAAMC,MAAM,GAAG,MAAMjB,kBAAkB,CAACe,GAAG,EAAE;MAAEG,aAAa,EAAE;IAAM,CAAC,CAAC;IAEtE,MAAMC,KAAK,GAAGF,MAAM,aAANA,MAAM,wBAAAT,oBAAA,GAANS,MAAM,CAAG,+BAA+B,CAAC,cAAAT,oBAAA,wBAAAC,qBAAA,GAAzCD,oBAAA,CAA4C,kBAAkB,CAAC,cAAAC,qBAAA,uBAA/DA,qBAAA,CAAkE,kBAAkB,CAAC;IACnG,IAAI,CAACU,KAAK,EAAE;MACVC,OAAO,CAACC,IAAI,CAAC,mCAAmC,CAAC;MACjD,OAAO,EAAE;IACX;IAEA,MAAMC,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,GACrCA,KAAK,CAACM,OAAO,CAAEC,SAAS,IAAKC,cAAc,CAACD,SAAS,CAAC,CAAC,GACvDC,cAAc,CAACR,KAAK,CAAC;IAEzB,OAAOG,YAAY;EACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC9D,MAAM,IAAIzB,KAAK,CAAC,mEAAmE,CAAC;EACtF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}