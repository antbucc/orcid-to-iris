{"ast":null,"code":"export async function fetchPublications(orcidId) {\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n  const response = await fetch(url, {\n    headers: {\n      Accept: \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch publications\");\n  }\n  const data = await response.json();\n  const publications = [];\n  for (const work of data.group || []) {\n    var _summary$title, _summary$title$title, _summary$journalTitl, _summary$publication, _summary$publication$, _summary$keywords;\n    const summary = work[\"work-summary\"][0];\n    const title = ((_summary$title = summary.title) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title.title) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title.value) || \"No Title\";\n    let doi = null;\n    for (const extId of ((_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : _summary$externalIds[\"external-id\"]) || []) {\n      var _summary$externalIds;\n      if (extId[\"external-id-type\"] === \"doi\") {\n        doi = extId[\"external-id-value\"];\n        break;\n      }\n    }\n\n    // Extract all available details\n    publications.push({\n      title,\n      authors: summary.authors || \"No Authors\",\n      // Replace this if ORCID provides authors\n      doi,\n      journal: ((_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl.value) || \"No Journal\",\n      year: ((_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication.year) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$.value) || \"No Year\",\n      volume: summary.volume || \"\",\n      issue: summary.issue || \"\",\n      pages: summary.pages || \"\",\n      abstract: summary.abstract || \"\",\n      publisher: summary.publisher || \"\",\n      type: summary.type || \"Unknown\",\n      keywords: ((_summary$keywords = summary.keywords) === null || _summary$keywords === void 0 ? void 0 : _summary$keywords.join(\", \")) || \"\"\n    });\n  }\n  return publications;\n}","map":{"version":3,"names":["fetchPublications","orcidId","url","response","fetch","headers","Accept","ok","Error","data","json","publications","work","group","_summary$title","_summary$title$title","_summary$journalTitl","_summary$publication","_summary$publication$","_summary$keywords","summary","title","value","doi","extId","_summary$externalIds","push","authors","journal","year","volume","issue","pages","abstract","publisher","type","keywords","join"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["export async function fetchPublications(orcidId) {\n    const url = `https://pub.orcid.org/v3.0/${orcidId}/works`;\n  \n    const response = await fetch(url, {\n      headers: {\n        Accept: \"application/json\",\n      },\n    });\n  \n    if (!response.ok) {\n      throw new Error(\"Failed to fetch publications\");\n    }\n  \n    const data = await response.json();\n    const publications = [];\n  \n    for (const work of data.group || []) {\n      const summary = work[\"work-summary\"][0];\n      const title = summary.title?.title?.value || \"No Title\";\n      let doi = null;\n  \n      for (const extId of summary[\"external-ids\"]?.[\"external-id\"] || []) {\n        if (extId[\"external-id-type\"] === \"doi\") {\n          doi = extId[\"external-id-value\"];\n          break;\n        }\n      }\n  \n      // Extract all available details\n      publications.push({\n        title,\n        authors: summary.authors || \"No Authors\", // Replace this if ORCID provides authors\n        doi,\n        journal: summary[\"journal-title\"]?.value || \"No Journal\",\n        year: summary[\"publication-date\"]?.year?.value || \"No Year\",\n        volume: summary.volume || \"\",\n        issue: summary.issue || \"\",\n        pages: summary.pages || \"\",\n        abstract: summary.abstract || \"\",\n        publisher: summary.publisher || \"\",\n        type: summary.type || \"Unknown\",\n        keywords: summary.keywords?.join(\", \") || \"\",\n      });\n    }\n  \n    return publications;\n  }\n  "],"mappings":"AAAA,OAAO,eAAeA,iBAAiBA,CAACC,OAAO,EAAE;EAC7C,MAAMC,GAAG,GAAG,8BAA8BD,OAAO,QAAQ;EAEzD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAChCG,OAAO,EAAE;MACPC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClC,MAAMC,YAAY,GAAG,EAAE;EAEvB,KAAK,MAAMC,IAAI,IAAIH,IAAI,CAACI,KAAK,IAAI,EAAE,EAAE;IAAA,IAAAC,cAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,iBAAA;IACnC,MAAMC,OAAO,GAAGR,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IACvC,MAAMS,KAAK,GAAG,EAAAP,cAAA,GAAAM,OAAO,CAACC,KAAK,cAAAP,cAAA,wBAAAC,oBAAA,GAAbD,cAAA,CAAeO,KAAK,cAAAN,oBAAA,uBAApBA,oBAAA,CAAsBO,KAAK,KAAI,UAAU;IACvD,IAAIC,GAAG,GAAG,IAAI;IAEd,KAAK,MAAMC,KAAK,IAAI,EAAAC,oBAAA,GAAAL,OAAO,CAAC,cAAc,CAAC,cAAAK,oBAAA,uBAAvBA,oBAAA,CAA0B,aAAa,CAAC,KAAI,EAAE,EAAE;MAAA,IAAAA,oBAAA;MAClE,IAAID,KAAK,CAAC,kBAAkB,CAAC,KAAK,KAAK,EAAE;QACvCD,GAAG,GAAGC,KAAK,CAAC,mBAAmB,CAAC;QAChC;MACF;IACF;;IAEA;IACAb,YAAY,CAACe,IAAI,CAAC;MAChBL,KAAK;MACLM,OAAO,EAAEP,OAAO,CAACO,OAAO,IAAI,YAAY;MAAE;MAC1CJ,GAAG;MACHK,OAAO,EAAE,EAAAZ,oBAAA,GAAAI,OAAO,CAAC,eAAe,CAAC,cAAAJ,oBAAA,uBAAxBA,oBAAA,CAA0BM,KAAK,KAAI,YAAY;MACxDO,IAAI,EAAE,EAAAZ,oBAAA,GAAAG,OAAO,CAAC,kBAAkB,CAAC,cAAAH,oBAAA,wBAAAC,qBAAA,GAA3BD,oBAAA,CAA6BY,IAAI,cAAAX,qBAAA,uBAAjCA,qBAAA,CAAmCI,KAAK,KAAI,SAAS;MAC3DQ,MAAM,EAAEV,OAAO,CAACU,MAAM,IAAI,EAAE;MAC5BC,KAAK,EAAEX,OAAO,CAACW,KAAK,IAAI,EAAE;MAC1BC,KAAK,EAAEZ,OAAO,CAACY,KAAK,IAAI,EAAE;MAC1BC,QAAQ,EAAEb,OAAO,CAACa,QAAQ,IAAI,EAAE;MAChCC,SAAS,EAAEd,OAAO,CAACc,SAAS,IAAI,EAAE;MAClCC,IAAI,EAAEf,OAAO,CAACe,IAAI,IAAI,SAAS;MAC/BC,QAAQ,EAAE,EAAAjB,iBAAA,GAAAC,OAAO,CAACgB,QAAQ,cAAAjB,iBAAA,uBAAhBA,iBAAA,CAAkBkB,IAAI,CAAC,IAAI,CAAC,KAAI;IAC5C,CAAC,CAAC;EACJ;EAEA,OAAO1B,YAAY;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}