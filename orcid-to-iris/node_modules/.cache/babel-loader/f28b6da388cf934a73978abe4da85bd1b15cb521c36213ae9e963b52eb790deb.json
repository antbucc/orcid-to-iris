{"ast":null,"code":"import axios from \"axios\";\nimport xml2js from \"xml2js\";\nexport async function fetchPublicationsFromXml(orcidId) {\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  try {\n    var _json$activitiesSumm, _json$activitiesSumm$;\n    // Fetch the XML data from the API\n    const response = await axios.get(url, {\n      headers: {\n        Accept: \"application/vnd.orcid+xml\"\n      }\n    });\n\n    // Parse the XML data into JSON\n    const xml = response.data;\n    const json = await xml2js.parseStringPromise(xml, {\n      explicitArray: false\n    });\n    console.log(\"quooo: \" + JSON.stringify(json));\n\n    // Navigate to the publications data\n    const works = json === null || json === void 0 ? void 0 : (_json$activitiesSumm = json[\"activities-summary\"]) === null || _json$activitiesSumm === void 0 ? void 0 : (_json$activitiesSumm$ = _json$activitiesSumm[\"works\"]) === null || _json$activitiesSumm$ === void 0 ? void 0 : _json$activitiesSumm$[\"group\"];\n    if (!works) {\n      console.error(\"No works found.\");\n      return [];\n    }\n\n    // Extract relevant data from the publications field\n    const publications = works.flatMap(group => {\n      const summaries = group[\"work-summary\"];\n      if (!Array.isArray(summaries)) return []; // Handle single or missing summaries\n      return summaries.map(summary => {\n        var _summary$title, _summary$title$title, _summary$externalIds, _summary$externalIds$, _summary$externalIds$2, _summary$journalTitl, _summary$publication, _summary$publication$;\n        return {\n          title: (summary === null || summary === void 0 ? void 0 : (_summary$title = summary[\"title\"]) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title[\"title\"]) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title[\"value\"]) || \"Unknown Title\",\n          doi: (summary === null || summary === void 0 ? void 0 : (_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : (_summary$externalIds$ = _summary$externalIds[\"external-id\"]) === null || _summary$externalIds$ === void 0 ? void 0 : (_summary$externalIds$2 = _summary$externalIds$.find(id => id[\"external-id-type\"] === \"doi\")) === null || _summary$externalIds$2 === void 0 ? void 0 : _summary$externalIds$2[\"external-id-value\"]) || null,\n          journal: (summary === null || summary === void 0 ? void 0 : (_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl[\"value\"]) || \"Unknown Journal\",\n          year: (summary === null || summary === void 0 ? void 0 : (_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication[\"year\"]) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$[\"value\"]) || \"Unknown Year\",\n          type: (summary === null || summary === void 0 ? void 0 : summary[\"type\"]) || \"Unknown Type\"\n        };\n      });\n    });\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing data:\", error);\n    throw new Error(\"Failed to fetch publications\");\n  }\n}","map":{"version":3,"names":["axios","xml2js","fetchPublicationsFromXml","orcidId","url","_json$activitiesSumm","_json$activitiesSumm$","response","get","headers","Accept","xml","data","json","parseStringPromise","explicitArray","console","log","JSON","stringify","works","error","publications","flatMap","group","summaries","Array","isArray","map","summary","_summary$title","_summary$title$title","_summary$externalIds","_summary$externalIds$","_summary$externalIds$2","_summary$journalTitl","_summary$publication","_summary$publication$","title","doi","find","id","journal","year","type","Error"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import axios from \"axios\";\nimport xml2js from \"xml2js\";\n\nexport async function fetchPublicationsFromXml(orcidId) {\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n\n  try {\n    // Fetch the XML data from the API\n    const response = await axios.get(url, {\n      headers: {\n        Accept: \"application/vnd.orcid+xml\",\n      },\n    });\n\n    // Parse the XML data into JSON\n    const xml = response.data;\n    const json = await xml2js.parseStringPromise(xml, { explicitArray: false });\n    console.log(\"quooo: \"+JSON.stringify(json));\n\n    // Navigate to the publications data\n    const works = json?.[\"activities-summary\"]?.[\"works\"]?.[\"group\"];\n    if (!works) {\n      console.error(\"No works found.\");\n      return [];\n    }\n\n    // Extract relevant data from the publications field\n    const publications = works.flatMap((group) => {\n      const summaries = group[\"work-summary\"];\n      if (!Array.isArray(summaries)) return []; // Handle single or missing summaries\n      return summaries.map((summary) => ({\n        title: summary?.[\"title\"]?.[\"title\"]?.[\"value\"] || \"Unknown Title\",\n        doi: summary?.[\"external-ids\"]?.[\"external-id\"]?.find(\n          (id) => id[\"external-id-type\"] === \"doi\"\n        )?.[\"external-id-value\"] || null,\n        journal: summary?.[\"journal-title\"]?.[\"value\"] || \"Unknown Journal\",\n        year: summary?.[\"publication-date\"]?.[\"year\"]?.[\"value\"] || \"Unknown Year\",\n        type: summary?.[\"type\"] || \"Unknown Type\",\n      }));\n    });\n\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing data:\", error);\n    throw new Error(\"Failed to fetch publications\");\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}