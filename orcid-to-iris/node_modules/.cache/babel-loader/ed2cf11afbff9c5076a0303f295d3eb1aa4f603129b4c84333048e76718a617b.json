{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nasync function fetchMetadataFromCrossRef(doi) {\n  if (!doi) return null;\n  const url = `https://api.crossref.org/works/${encodeURIComponent(doi)}`;\n  try {\n    var _data$message, _data$message$contain, _data$message2, _data$message3, _data$message4, _data$message5, _data$message6, _data$message6$author;\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.warn(`Failed to fetch metadata for DOI: ${doi}`);\n      return null;\n    }\n    const data = await response.json();\n    return {\n      journal: (data === null || data === void 0 ? void 0 : (_data$message = data.message) === null || _data$message === void 0 ? void 0 : (_data$message$contain = _data$message.container_title) === null || _data$message$contain === void 0 ? void 0 : _data$message$contain[0]) || \"No Journal\",\n      volume: (data === null || data === void 0 ? void 0 : (_data$message2 = data.message) === null || _data$message2 === void 0 ? void 0 : _data$message2.volume) || \"No Volume\",\n      issue: (data === null || data === void 0 ? void 0 : (_data$message3 = data.message) === null || _data$message3 === void 0 ? void 0 : _data$message3.issue) || \"No Issue\",\n      pages: (data === null || data === void 0 ? void 0 : (_data$message4 = data.message) === null || _data$message4 === void 0 ? void 0 : _data$message4.page) || \"No Pages\",\n      publisher: (data === null || data === void 0 ? void 0 : (_data$message5 = data.message) === null || _data$message5 === void 0 ? void 0 : _data$message5.publisher) || \"No Publisher\",\n      authors: (data === null || data === void 0 ? void 0 : (_data$message6 = data.message) === null || _data$message6 === void 0 ? void 0 : (_data$message6$author = _data$message6.author) === null || _data$message6$author === void 0 ? void 0 : _data$message6$author.map(author => `${author.given} ${author.family}`).join(\", \")) || \"No Authors\"\n    };\n  } catch (error) {\n    console.error(`Error fetching metadata for DOI ${doi}:`, error.message);\n    return null;\n  }\n}\nexport async function fetchPublicationsFromXml(orcidId) {\n  // Validate ORCID ID format\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$activitiesAc, _result$activitiesAc$;\n    // Fetch data from ORCID API\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    console.log(\"Fetched XML:\", xml); // Debugging\n\n    // Parse XML response to JSON\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    console.log(\"Parsed JSON Response:\", JSON.stringify(result, null, 2)); // Debugging\n\n    // Navigate to works data\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesAc = result[\"activities:activities-summary\"]) === null || _result$activitiesAc === void 0 ? void 0 : (_result$activitiesAc$ = _result$activitiesAc[\"activities:works\"]) === null || _result$activitiesAc$ === void 0 ? void 0 : _result$activitiesAc$[\"activities:group\"];\n    if (!works) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n\n    // Extract and normalize works data\n    const publications = await Promise.all((Array.isArray(works) ? works : [works]).flatMap(async workGroup => {\n      return parseWorkGroup(workGroup);\n    }));\n    console.log(\"Parsed Publications:\", publications); // Debugging\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}\n\n// Helper function to parse a single work group\nasync function parseWorkGroup(workGroup) {\n  const summaries = Array.isArray(workGroup[\"work:work-summary\"]) ? workGroup[\"work:work-summary\"] : [workGroup[\"work:work-summary\"]];\n  return await Promise.all(summaries.map(async summary => {\n    var _summary$commonExter, _summary$commonExter2, _externalIds$find, _summary$workTitle, _summary$workJournal, _summary$commonPubli, _summary$workPublish;\n    const externalIds = Array.isArray(summary === null || summary === void 0 ? void 0 : (_summary$commonExter = summary[\"common:external-ids\"]) === null || _summary$commonExter === void 0 ? void 0 : _summary$commonExter[\"common:external-id\"]) ? summary[\"common:external-ids\"][\"common:external-id\"] : [summary === null || summary === void 0 ? void 0 : (_summary$commonExter2 = summary[\"common:external-ids\"]) === null || _summary$commonExter2 === void 0 ? void 0 : _summary$commonExter2[\"common:external-id\"]].filter(Boolean);\n    const doi = ((_externalIds$find = externalIds.find(id => id[\"common:external-id-type\"] === \"doi\")) === null || _externalIds$find === void 0 ? void 0 : _externalIds$find[\"common:external-id-value\"]) || \"\";\n\n    // Fetch additional metadata from CrossRef if DOI is available\n    const crossRefData = doi ? await fetchMetadataFromCrossRef(doi) : {};\n    return {\n      title: (summary === null || summary === void 0 ? void 0 : (_summary$workTitle = summary[\"work:title\"]) === null || _summary$workTitle === void 0 ? void 0 : _summary$workTitle[\"common:title\"]) || \"No Title\",\n      authors: (crossRefData === null || crossRefData === void 0 ? void 0 : crossRefData.authors) || \"No Authors\",\n      doi,\n      journal: (crossRefData === null || crossRefData === void 0 ? void 0 : crossRefData.journal) || (summary === null || summary === void 0 ? void 0 : (_summary$workJournal = summary[\"work:journal-title\"]) === null || _summary$workJournal === void 0 ? void 0 : _summary$workJournal[\"common:title\"]) || \"No Journal\",\n      year: (summary === null || summary === void 0 ? void 0 : (_summary$commonPubli = summary[\"common:publication-date\"]) === null || _summary$commonPubli === void 0 ? void 0 : _summary$commonPubli[\"common:year\"]) || \"No Year\",\n      volume: (crossRefData === null || crossRefData === void 0 ? void 0 : crossRefData.volume) || \"No Volume\",\n      issue: (crossRefData === null || crossRefData === void 0 ? void 0 : crossRefData.issue) || \"No Issue\",\n      pages: (crossRefData === null || crossRefData === void 0 ? void 0 : crossRefData.pages) || \"No Pages\",\n      abstract: (summary === null || summary === void 0 ? void 0 : summary[\"common:short-description\"]) || \"No Abstract\",\n      publisher: (crossRefData === null || crossRefData === void 0 ? void 0 : crossRefData.publisher) || (summary === null || summary === void 0 ? void 0 : (_summary$workPublish = summary[\"work:publisher\"]) === null || _summary$workPublish === void 0 ? void 0 : _summary$workPublish[\"common:title\"]) || \"No Publisher\"\n    };\n  }));\n}","map":{"version":3,"names":["parseStringPromise","fetchMetadataFromCrossRef","doi","url","encodeURIComponent","_data$message","_data$message$contain","_data$message2","_data$message3","_data$message4","_data$message5","_data$message6","_data$message6$author","response","fetch","ok","console","warn","data","json","journal","message","container_title","volume","issue","pages","page","publisher","authors","author","map","given","family","join","error","fetchPublicationsFromXml","orcidId","test","Error","headers","Accept","_result$activitiesAc","_result$activitiesAc$","status","statusText","xml","text","log","result","explicitArray","JSON","stringify","works","publications","Promise","all","Array","isArray","flatMap","workGroup","parseWorkGroup","summaries","summary","_summary$commonExter","_summary$commonExter2","_externalIds$find","_summary$workTitle","_summary$workJournal","_summary$commonPubli","_summary$workPublish","externalIds","filter","Boolean","find","id","crossRefData","title","year","abstract"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nasync function fetchMetadataFromCrossRef(doi) {\n  if (!doi) return null;\n\n  const url = `https://api.crossref.org/works/${encodeURIComponent(doi)}`;\n\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      console.warn(`Failed to fetch metadata for DOI: ${doi}`);\n      return null;\n    }\n\n    const data = await response.json();\n    return {\n      journal: data?.message?.container_title?.[0] || \"No Journal\",\n      volume: data?.message?.volume || \"No Volume\",\n      issue: data?.message?.issue || \"No Issue\",\n      pages: data?.message?.page || \"No Pages\",\n      publisher: data?.message?.publisher || \"No Publisher\",\n      authors: data?.message?.author\n        ?.map((author) => `${author.given} ${author.family}`)\n        .join(\", \") || \"No Authors\",\n    };\n  } catch (error) {\n    console.error(`Error fetching metadata for DOI ${doi}:`, error.message);\n    return null;\n  }\n}\n\nexport async function fetchPublicationsFromXml(orcidId) {\n  // Validate ORCID ID format\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = { Accept: \"application/xml\" };\n\n  try {\n    // Fetch data from ORCID API\n    const response = await fetch(url, { headers });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n\n    const xml = await response.text();\n    console.log(\"Fetched XML:\", xml); // Debugging\n\n    // Parse XML response to JSON\n    const result = await parseStringPromise(xml, { explicitArray: false });\n    console.log(\"Parsed JSON Response:\", JSON.stringify(result, null, 2)); // Debugging\n\n    // Navigate to works data\n    const works = result?.[\"activities:activities-summary\"]?.[\"activities:works\"]?.[\"activities:group\"];\n    if (!works) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n\n    // Extract and normalize works data\n    const publications = await Promise.all(\n      (Array.isArray(works) ? works : [works]).flatMap(async (workGroup) => {\n        return parseWorkGroup(workGroup);\n      })\n    );\n\n    console.log(\"Parsed Publications:\", publications); // Debugging\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}\n\n// Helper function to parse a single work group\nasync function parseWorkGroup(workGroup) {\n  const summaries = Array.isArray(workGroup[\"work:work-summary\"])\n    ? workGroup[\"work:work-summary\"]\n    : [workGroup[\"work:work-summary\"]];\n\n  return await Promise.all(\n    summaries.map(async (summary) => {\n      const externalIds = Array.isArray(summary?.[\"common:external-ids\"]?.[\"common:external-id\"])\n        ? summary[\"common:external-ids\"][\"common:external-id\"]\n        : [summary?.[\"common:external-ids\"]?.[\"common:external-id\"]].filter(Boolean);\n\n      const doi = externalIds.find((id) => id[\"common:external-id-type\"] === \"doi\")?.[\"common:external-id-value\"] || \"\";\n\n      // Fetch additional metadata from CrossRef if DOI is available\n      const crossRefData = doi ? await fetchMetadataFromCrossRef(doi) : {};\n\n      return {\n        title: summary?.[\"work:title\"]?.[\"common:title\"] || \"No Title\",\n        authors: crossRefData?.authors || \"No Authors\",\n        doi,\n        journal: crossRefData?.journal || summary?.[\"work:journal-title\"]?.[\"common:title\"] || \"No Journal\",\n        year: summary?.[\"common:publication-date\"]?.[\"common:year\"] || \"No Year\",\n        volume: crossRefData?.volume || \"No Volume\",\n        issue: crossRefData?.issue || \"No Issue\",\n        pages: crossRefData?.pages || \"No Pages\",\n        abstract: summary?.[\"common:short-description\"] || \"No Abstract\",\n        publisher: crossRefData?.publisher || summary?.[\"work:publisher\"]?.[\"common:title\"] || \"No Publisher\",\n      };\n    })\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}