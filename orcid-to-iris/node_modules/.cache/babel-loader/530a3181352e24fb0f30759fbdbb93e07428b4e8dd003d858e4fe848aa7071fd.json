{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function fetchPublicationsAsXml(orcidId) {\n  // Validate ORCID ID format\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$activitiesSu, _result$activitiesSu$;\n    // Fetch data from ORCID API\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    console.log(\"Fetched XML:\", xml); // Debugging\n\n    // Parse XML response to JSON\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    console.log(\"Parsed JSON Response:\", JSON.stringify(result, null, 2)); // Debugging\n\n    // Extract works data\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesSu = result[\"activities-summary\"]) === null || _result$activitiesSu === void 0 ? void 0 : (_result$activitiesSu$ = _result$activitiesSu[\"works\"]) === null || _result$activitiesSu$ === void 0 ? void 0 : _result$activitiesSu$[\"group\"];\n    if (!works || works.length === 0) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n\n    // Normalize works data\n    const publications = (Array.isArray(works) ? works : [works]).map(work => {\n      var _summary$title, _summary$title$title, _summary$externalIds, _summary$externalIds$, _summary$externalIds$2, _summary$journalTitl, _summary$publication, _summary$publication$;\n      const summary = Array.isArray(work[\"work-summary\"]) ? work[\"work-summary\"][0] : work[\"work-summary\"];\n      return {\n        title: (summary === null || summary === void 0 ? void 0 : (_summary$title = summary[\"title\"]) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title[\"title\"]) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title.value) || \"No Title\",\n        authors: \"No Authors\",\n        // Public ORCID data doesn't include authors\n        doi: (summary === null || summary === void 0 ? void 0 : (_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : (_summary$externalIds$ = _summary$externalIds[\"external-id\"]) === null || _summary$externalIds$ === void 0 ? void 0 : (_summary$externalIds$2 = _summary$externalIds$.find(id => id[\"external-id-type\"] === \"doi\")) === null || _summary$externalIds$2 === void 0 ? void 0 : _summary$externalIds$2[\"external-id-value\"]) || \"\",\n        journal: (summary === null || summary === void 0 ? void 0 : (_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl.value) || \"No Journal\",\n        year: (summary === null || summary === void 0 ? void 0 : (_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication.year) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$.value) || \"No Year\",\n        volume: (summary === null || summary === void 0 ? void 0 : summary.volume) || \"No Volume\",\n        issue: (summary === null || summary === void 0 ? void 0 : summary.issue) || \"No Issue\",\n        pages: (summary === null || summary === void 0 ? void 0 : summary[\"page-range\"]) || \"No Pages\",\n        abstract: (summary === null || summary === void 0 ? void 0 : summary[\"short-description\"]) || \"No Abstract\",\n        publisher: (summary === null || summary === void 0 ? void 0 : summary.publisher) || \"No Publisher\"\n      };\n    });\n    console.log(\"Parsed Publications:\", publications); // Debugging\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}","map":{"version":3,"names":["parseStringPromise","fetchPublicationsAsXml","orcidId","test","Error","url","headers","Accept","_result$activitiesSu","_result$activitiesSu$","response","fetch","ok","status","statusText","xml","text","console","log","result","explicitArray","JSON","stringify","works","length","warn","publications","Array","isArray","map","work","_summary$title","_summary$title$title","_summary$externalIds","_summary$externalIds$","_summary$externalIds$2","_summary$journalTitl","_summary$publication","_summary$publication$","summary","title","value","authors","doi","find","id","journal","year","volume","issue","pages","abstract","publisher","error","message"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function fetchPublicationsAsXml(orcidId) {\n    // Validate ORCID ID format\n    if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n        throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n    }\n\n    const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n    const headers = { Accept: \"application/xml\" };\n\n    try {\n        // Fetch data from ORCID API\n        const response = await fetch(url, { headers });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n        }\n\n        const xml = await response.text();\n        console.log(\"Fetched XML:\", xml); // Debugging\n\n        // Parse XML response to JSON\n        const result = await parseStringPromise(xml, { explicitArray: false });\n        console.log(\"Parsed JSON Response:\", JSON.stringify(result, null, 2)); // Debugging\n\n        // Extract works data\n        const works = result?.[\"activities-summary\"]?.[\"works\"]?.[\"group\"];\n        if (!works || works.length === 0) {\n            console.warn(\"No works found for this ORCID ID.\");\n            return [];\n        }\n\n        // Normalize works data\n        const publications = (Array.isArray(works) ? works : [works]).map((work) => {\n            const summary = Array.isArray(work[\"work-summary\"]) ? work[\"work-summary\"][0] : work[\"work-summary\"];\n\n            return {\n                title: summary?.[\"title\"]?.[\"title\"]?.value || \"No Title\",\n                authors: \"No Authors\", // Public ORCID data doesn't include authors\n                doi: summary?.[\"external-ids\"]?.[\"external-id\"]\n                    ?.find((id) => id[\"external-id-type\"] === \"doi\")?.[\"external-id-value\"] || \"\",\n                journal: summary?.[\"journal-title\"]?.value || \"No Journal\",\n                year: summary?.[\"publication-date\"]?.year?.value || \"No Year\",\n                volume: summary?.volume || \"No Volume\",\n                issue: summary?.issue || \"No Issue\",\n                pages: summary?.[\"page-range\"] || \"No Pages\",\n                abstract: summary?.[\"short-description\"] || \"No Abstract\",\n                publisher: summary?.publisher || \"No Publisher\",\n            };\n        });\n\n        console.log(\"Parsed Publications:\", publications); // Debugging\n        return publications;\n    } catch (error) {\n        console.error(\"Error fetching or parsing XML:\", error.message);\n        throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}