{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function fetchPublicationsWithToken(orcidId, token) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  if (!token) {\n    throw new Error(\"Missing access token. Please provide a valid token.\");\n  }\n  const url = `https://api.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\",\n    Authorization: `Bearer ${token}`\n  };\n  try {\n    var _result$activitiesAc, _result$activitiesAc$;\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesAc = result[\"activities:activities-summary\"]) === null || _result$activitiesAc === void 0 ? void 0 : (_result$activitiesAc$ = _result$activitiesAc[\"activities:works\"]) === null || _result$activitiesAc$ === void 0 ? void 0 : _result$activitiesAc$[\"activities:group\"];\n    if (!works) {\n      return [];\n    }\n    return (Array.isArray(works) ? works : [works]).flatMap(parseWorkGroup);\n  } catch (error) {\n    throw new Error(`Error fetching or parsing XML: ${error.message}`);\n  }\n}\nfunction parseWorkGroup(workGroup) {\n  const summaries = Array.isArray(workGroup[\"work:work-summary\"]) ? workGroup[\"work:work-summary\"] : [workGroup[\"work:work-summary\"]];\n  return summaries.map(summary => {\n    var _summary$commonExter, _summary$commonExter2, _externalIds$find, _summary$workTitle, _summary$workJournal, _summary$commonPubli;\n    const externalIds = Array.isArray(summary === null || summary === void 0 ? void 0 : (_summary$commonExter = summary[\"common:external-ids\"]) === null || _summary$commonExter === void 0 ? void 0 : _summary$commonExter[\"common:external-id\"]) ? summary[\"common:external-ids\"][\"common:external-id\"] : [summary === null || summary === void 0 ? void 0 : (_summary$commonExter2 = summary[\"common:external-ids\"]) === null || _summary$commonExter2 === void 0 ? void 0 : _summary$commonExter2[\"common:external-id\"]].filter(Boolean);\n    const doi = ((_externalIds$find = externalIds.find(id => id[\"common:external-id-type\"] === \"doi\")) === null || _externalIds$find === void 0 ? void 0 : _externalIds$find[\"common:external-id-value\"]) || \"\";\n    return {\n      title: (summary === null || summary === void 0 ? void 0 : (_summary$workTitle = summary[\"work:title\"]) === null || _summary$workTitle === void 0 ? void 0 : _summary$workTitle[\"common:title\"]) || \"No Title\",\n      authors: extractContributors(summary),\n      doi,\n      journal: (summary === null || summary === void 0 ? void 0 : (_summary$workJournal = summary[\"work:journal-title\"]) === null || _summary$workJournal === void 0 ? void 0 : _summary$workJournal[\"common:title\"]) || \"No Journal\",\n      year: (summary === null || summary === void 0 ? void 0 : (_summary$commonPubli = summary[\"common:publication-date\"]) === null || _summary$commonPubli === void 0 ? void 0 : _summary$commonPubli[\"common:year\"]) || \"No Year\",\n      volume: \"No Volume\",\n      issue: \"No Issue\",\n      pages: \"No Pages\",\n      abstract: (summary === null || summary === void 0 ? void 0 : summary[\"common:short-description\"]) || \"No Abstract\",\n      publisher: \"No Publisher\"\n    };\n  });\n}\nfunction extractContributors(summary) {\n  var _summary$workContrib;\n  const contributors = summary === null || summary === void 0 ? void 0 : (_summary$workContrib = summary[\"work:contributors\"]) === null || _summary$workContrib === void 0 ? void 0 : _summary$workContrib[\"work:contributor\"];\n  if (!contributors) return \"No Authors\";\n  const contributorArray = Array.isArray(contributors) ? contributors : [contributors];\n  return contributorArray.map(contributor => (contributor === null || contributor === void 0 ? void 0 : contributor[\"common:credit-name\"]) || (contributor === null || contributor === void 0 ? void 0 : contributor[\"work:contributor-name\"]) || \"Unknown Author\").join(\", \");\n}","map":{"version":3,"names":["parseStringPromise","fetchPublicationsWithToken","orcidId","token","test","Error","url","headers","Accept","Authorization","_result$activitiesAc","_result$activitiesAc$","response","fetch","ok","status","statusText","xml","text","result","explicitArray","works","Array","isArray","flatMap","parseWorkGroup","error","message","workGroup","summaries","map","summary","_summary$commonExter","_summary$commonExter2","_externalIds$find","_summary$workTitle","_summary$workJournal","_summary$commonPubli","externalIds","filter","Boolean","doi","find","id","title","authors","extractContributors","journal","year","volume","issue","pages","abstract","publisher","_summary$workContrib","contributors","contributorArray","contributor","join"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function fetchPublicationsWithToken(orcidId, token) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n\n  if (!token) {\n    throw new Error(\"Missing access token. Please provide a valid token.\");\n  }\n\n  const url = `https://api.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\",\n    Authorization: `Bearer ${token}`,\n  };\n\n  try {\n    const response = await fetch(url, { headers });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, { explicitArray: false });\n\n    const works = result?.[\"activities:activities-summary\"]?.[\"activities:works\"]?.[\"activities:group\"];\n    if (!works) {\n      return [];\n    }\n\n    return (Array.isArray(works) ? works : [works]).flatMap(parseWorkGroup);\n  } catch (error) {\n    throw new Error(`Error fetching or parsing XML: ${error.message}`);\n  }\n}\n\nfunction parseWorkGroup(workGroup) {\n  const summaries = Array.isArray(workGroup[\"work:work-summary\"])\n    ? workGroup[\"work:work-summary\"]\n    : [workGroup[\"work:work-summary\"]];\n\n  return summaries.map((summary) => {\n    const externalIds = Array.isArray(summary?.[\"common:external-ids\"]?.[\"common:external-id\"])\n      ? summary[\"common:external-ids\"][\"common:external-id\"]\n      : [summary?.[\"common:external-ids\"]?.[\"common:external-id\"]].filter(Boolean);\n\n    const doi = externalIds.find((id) => id[\"common:external-id-type\"] === \"doi\")?.[\"common:external-id-value\"] || \"\";\n\n    return {\n      title: summary?.[\"work:title\"]?.[\"common:title\"] || \"No Title\",\n      authors: extractContributors(summary),\n      doi,\n      journal: summary?.[\"work:journal-title\"]?.[\"common:title\"] || \"No Journal\",\n      year: summary?.[\"common:publication-date\"]?.[\"common:year\"] || \"No Year\",\n      volume: \"No Volume\",\n      issue: \"No Issue\",\n      pages: \"No Pages\",\n      abstract: summary?.[\"common:short-description\"] || \"No Abstract\",\n      publisher: \"No Publisher\",\n    };\n  });\n}\n\nfunction extractContributors(summary) {\n  const contributors = summary?.[\"work:contributors\"]?.[\"work:contributor\"];\n  if (!contributors) return \"No Authors\";\n\n  const contributorArray = Array.isArray(contributors) ? contributors : [contributors];\n  return contributorArray\n    .map((contributor) => contributor?.[\"common:credit-name\"] || contributor?.[\"work:contributor-name\"] || \"Unknown Author\")\n    .join(\", \");\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}