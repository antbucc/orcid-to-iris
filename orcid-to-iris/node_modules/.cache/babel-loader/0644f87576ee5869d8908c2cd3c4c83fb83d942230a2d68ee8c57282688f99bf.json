{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nasync function fetchMetadataFromCrossRef(doi) {\n  const url = `https://api.crossref.org/works/${encodeURIComponent(doi)}`;\n  try {\n    var _data$message, _data$message$author;\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.warn(`Failed to fetch metadata for DOI: ${doi}`);\n      return \"Unknown Authors\";\n    }\n    const data = await response.json();\n    return (data === null || data === void 0 ? void 0 : (_data$message = data.message) === null || _data$message === void 0 ? void 0 : (_data$message$author = _data$message.author) === null || _data$message$author === void 0 ? void 0 : _data$message$author.map(author => `${author.given} ${author.family}`).join(\", \")) || \"Unknown Authors\";\n  } catch (error) {\n    console.error(\"Error fetching CrossRef metadata:\", error.message);\n    return \"Unknown Authors\";\n  }\n}\nexport async function fetchPublicationsAsXml(orcidId) {\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$activitiesSu, _result$activitiesSu$;\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesSu = result[\"activities-summary\"]) === null || _result$activitiesSu === void 0 ? void 0 : (_result$activitiesSu$ = _result$activitiesSu[\"works\"]) === null || _result$activitiesSu$ === void 0 ? void 0 : _result$activitiesSu$[\"group\"];\n    if (!works || works.length === 0) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n    const publications = await Promise.all((Array.isArray(works) ? works : [works]).map(async work => {\n      var _summary$externalIds, _summary$externalIds$, _summary$externalIds$2, _summary$title, _summary$title$title, _summary$journalTitl, _summary$publication, _summary$publication$;\n      const summary = Array.isArray(work[\"work-summary\"]) ? work[\"work-summary\"][0] : work[\"work-summary\"];\n      const doi = summary === null || summary === void 0 ? void 0 : (_summary$externalIds = summary[\"external-ids\"]) === null || _summary$externalIds === void 0 ? void 0 : (_summary$externalIds$ = _summary$externalIds[\"external-id\"]) === null || _summary$externalIds$ === void 0 ? void 0 : (_summary$externalIds$2 = _summary$externalIds$.find(id => id[\"external-id-type\"] === \"doi\")) === null || _summary$externalIds$2 === void 0 ? void 0 : _summary$externalIds$2[\"external-id-value\"];\n      return {\n        title: (summary === null || summary === void 0 ? void 0 : (_summary$title = summary[\"title\"]) === null || _summary$title === void 0 ? void 0 : (_summary$title$title = _summary$title[\"title\"]) === null || _summary$title$title === void 0 ? void 0 : _summary$title$title.value) || \"No Title\",\n        authors: doi ? await fetchMetadataFromCrossRef(doi) : \"Unknown Authors\",\n        doi: doi || \"\",\n        journal: (summary === null || summary === void 0 ? void 0 : (_summary$journalTitl = summary[\"journal-title\"]) === null || _summary$journalTitl === void 0 ? void 0 : _summary$journalTitl.value) || \"No Journal\",\n        year: (summary === null || summary === void 0 ? void 0 : (_summary$publication = summary[\"publication-date\"]) === null || _summary$publication === void 0 ? void 0 : (_summary$publication$ = _summary$publication.year) === null || _summary$publication$ === void 0 ? void 0 : _summary$publication$.value) || \"No Year\",\n        volume: (summary === null || summary === void 0 ? void 0 : summary.volume) || \"No Volume\",\n        issue: (summary === null || summary === void 0 ? void 0 : summary.issue) || \"No Issue\",\n        pages: (summary === null || summary === void 0 ? void 0 : summary[\"page-range\"]) || \"No Pages\",\n        abstract: (summary === null || summary === void 0 ? void 0 : summary[\"short-description\"]) || \"No Abstract\",\n        publisher: (summary === null || summary === void 0 ? void 0 : summary.publisher) || \"No Publisher\"\n      };\n    }));\n    console.log(\"Parsed Publications:\", publications);\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}","map":{"version":3,"names":["parseStringPromise","fetchMetadataFromCrossRef","doi","url","encodeURIComponent","_data$message","_data$message$author","response","fetch","ok","console","warn","data","json","message","author","map","given","family","join","error","fetchPublicationsAsXml","orcidId","test","Error","headers","Accept","_result$activitiesSu","_result$activitiesSu$","status","statusText","xml","text","result","explicitArray","works","length","publications","Promise","all","Array","isArray","work","_summary$externalIds","_summary$externalIds$","_summary$externalIds$2","_summary$title","_summary$title$title","_summary$journalTitl","_summary$publication","_summary$publication$","summary","find","id","title","value","authors","journal","year","volume","issue","pages","abstract","publisher","log"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nasync function fetchMetadataFromCrossRef(doi) {\n    const url = `https://api.crossref.org/works/${encodeURIComponent(doi)}`;\n\n    try {\n        const response = await fetch(url);\n\n        if (!response.ok) {\n            console.warn(`Failed to fetch metadata for DOI: ${doi}`);\n            return \"Unknown Authors\";\n        }\n\n        const data = await response.json();\n        return data?.message?.author?.map((author) => `${author.given} ${author.family}`).join(\", \") || \"Unknown Authors\";\n    } catch (error) {\n        console.error(\"Error fetching CrossRef metadata:\", error.message);\n        return \"Unknown Authors\";\n    }\n}\n\nexport async function fetchPublicationsAsXml(orcidId) {\n    if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n        throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n    }\n\n    const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n    const headers = { Accept: \"application/xml\" };\n\n    try {\n        const response = await fetch(url, { headers });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n        }\n\n        const xml = await response.text();\n        const result = await parseStringPromise(xml, { explicitArray: false });\n        const works = result?.[\"activities-summary\"]?.[\"works\"]?.[\"group\"];\n        if (!works || works.length === 0) {\n            console.warn(\"No works found for this ORCID ID.\");\n            return [];\n        }\n\n        const publications = await Promise.all(\n            (Array.isArray(works) ? works : [works]).map(async (work) => {\n                const summary = Array.isArray(work[\"work-summary\"]) ? work[\"work-summary\"][0] : work[\"work-summary\"];\n                const doi = summary?.[\"external-ids\"]?.[\"external-id\"]\n                    ?.find((id) => id[\"external-id-type\"] === \"doi\")?.[\"external-id-value\"];\n\n                return {\n                    title: summary?.[\"title\"]?.[\"title\"]?.value || \"No Title\",\n                    authors: doi ? await fetchMetadataFromCrossRef(doi) : \"Unknown Authors\",\n                    doi: doi || \"\",\n                    journal: summary?.[\"journal-title\"]?.value || \"No Journal\",\n                    year: summary?.[\"publication-date\"]?.year?.value || \"No Year\",\n                    volume: summary?.volume || \"No Volume\",\n                    issue: summary?.issue || \"No Issue\",\n                    pages: summary?.[\"page-range\"] || \"No Pages\",\n                    abstract: summary?.[\"short-description\"] || \"No Abstract\",\n                    publisher: summary?.publisher || \"No Publisher\",\n                };\n            })\n        );\n\n        console.log(\"Parsed Publications:\", publications);\n        return publications;\n    } catch (error) {\n        console.error(\"Error fetching or parsing XML:\", error.message);\n        throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}