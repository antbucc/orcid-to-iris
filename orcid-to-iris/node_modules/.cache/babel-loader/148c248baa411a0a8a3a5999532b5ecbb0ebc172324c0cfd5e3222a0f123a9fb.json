{"ast":null,"code":"import { parseStringPromise } from \"xml2js\";\nexport async function fetchPublicationsFromXml(orcidId) {\n  // Validate ORCID ID format\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = {\n    Accept: \"application/xml\"\n  };\n  try {\n    var _result$activitiesAc, _result$activitiesAc$;\n    // Fetch data from ORCID API\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n    const xml = await response.text();\n    console.log(\"Fetched XML:\", xml); // Debugging\n\n    // Parse XML response to JSON\n    const result = await parseStringPromise(xml, {\n      explicitArray: false\n    });\n    console.log(\"Parsed JSON Response:\", JSON.stringify(result, null, 2)); // Debugging\n\n    // Navigate to works data\n    const works = result === null || result === void 0 ? void 0 : (_result$activitiesAc = result[\"activities:activities-summary\"]) === null || _result$activitiesAc === void 0 ? void 0 : (_result$activitiesAc$ = _result$activitiesAc[\"activities:works\"]) === null || _result$activitiesAc$ === void 0 ? void 0 : _result$activitiesAc$[\"activities:group\"];\n    if (!works) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n\n    // Extract and normalize works data\n    const publications = Array.isArray(works) ? works.flatMap(workGroup => parseWorkGroup(workGroup)) : parseWorkGroup(works);\n    console.log(\"Parsed Publications:\", publications); // Debugging\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}\n\n// Helper function to parse a single work group\nfunction parseWorkGroup(workGroup) {\n  const summaries = Array.isArray(workGroup[\"work:work-summary\"]) ? workGroup[\"work:work-summary\"] : [workGroup[\"work:work-summary\"]];\n  return summaries.map(summary => {\n    var _summary$workTitle, _summary$commonExter, _summary$commonExter$, _summary$commonExter$2, _summary$workJournal, _summary$commonPubli, _summary$workPublish;\n    return {\n      title: (summary === null || summary === void 0 ? void 0 : (_summary$workTitle = summary[\"work:title\"]) === null || _summary$workTitle === void 0 ? void 0 : _summary$workTitle[\"common:title\"]) || \"No Title\",\n      authors: \"No Authors\",\n      // Public ORCID data doesn't include authors\n      doi: (summary === null || summary === void 0 ? void 0 : (_summary$commonExter = summary[\"common:external-ids\"]) === null || _summary$commonExter === void 0 ? void 0 : (_summary$commonExter$ = _summary$commonExter[\"common:external-id\"]) === null || _summary$commonExter$ === void 0 ? void 0 : (_summary$commonExter$2 = _summary$commonExter$.find(id => id[\"common:external-id-type\"] === \"doi\")) === null || _summary$commonExter$2 === void 0 ? void 0 : _summary$commonExter$2[\"common:external-id-value\"]) || \"\",\n      journal: (summary === null || summary === void 0 ? void 0 : (_summary$workJournal = summary[\"work:journal-title\"]) === null || _summary$workJournal === void 0 ? void 0 : _summary$workJournal[\"common:title\"]) || \"No Journal\",\n      year: (summary === null || summary === void 0 ? void 0 : (_summary$commonPubli = summary[\"common:publication-date\"]) === null || _summary$commonPubli === void 0 ? void 0 : _summary$commonPubli[\"common:year\"]) || \"No Year\",\n      volume: (summary === null || summary === void 0 ? void 0 : summary[\"work:volume\"]) || \"No Volume\",\n      issue: (summary === null || summary === void 0 ? void 0 : summary[\"work:issue\"]) || \"No Issue\",\n      pages: (summary === null || summary === void 0 ? void 0 : summary[\"work:page-range\"]) || \"No Pages\",\n      abstract: (summary === null || summary === void 0 ? void 0 : summary[\"common:short-description\"]) || \"No Abstract\",\n      publisher: (summary === null || summary === void 0 ? void 0 : (_summary$workPublish = summary[\"work:publisher\"]) === null || _summary$workPublish === void 0 ? void 0 : _summary$workPublish[\"common:title\"]) || \"No Publisher\"\n    };\n  });\n}","map":{"version":3,"names":["parseStringPromise","fetchPublicationsFromXml","orcidId","test","Error","url","headers","Accept","_result$activitiesAc","_result$activitiesAc$","response","fetch","ok","status","statusText","xml","text","console","log","result","explicitArray","JSON","stringify","works","warn","publications","Array","isArray","flatMap","workGroup","parseWorkGroup","error","message","summaries","map","summary","_summary$workTitle","_summary$commonExter","_summary$commonExter$","_summary$commonExter$2","_summary$workJournal","_summary$commonPubli","_summary$workPublish","title","authors","doi","find","id","journal","year","volume","issue","pages","abstract","publisher"],"sources":["/Users/bucchiarone/Library/Mobile Documents/com~apple~CloudDocs/Documents/Documents - Antonioâ€™s MacBook Pro/Projects/orcid-to-iris/orcid-to-iris/orcid-to-iris/src/services/orcidService.js"],"sourcesContent":["import { parseStringPromise } from \"xml2js\";\n\nexport async function fetchPublicationsFromXml(orcidId) {\n  // Validate ORCID ID format\n  if (!orcidId || !/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/.test(orcidId)) {\n    throw new Error(\"Invalid ORCID ID format. Please use the format ####-####-####-####.\");\n  }\n\n  const url = `https://pub.orcid.org/v3.0/${orcidId}/activities`;\n  const headers = { Accept: \"application/xml\" };\n\n  try {\n    // Fetch data from ORCID API\n    const response = await fetch(url, { headers });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch XML: ${response.status} - ${response.statusText}`);\n    }\n\n    const xml = await response.text();\n    console.log(\"Fetched XML:\", xml); // Debugging\n\n    // Parse XML response to JSON\n    const result = await parseStringPromise(xml, { explicitArray: false });\n    console.log(\"Parsed JSON Response:\", JSON.stringify(result, null, 2)); // Debugging\n\n    // Navigate to works data\n    const works = result?.[\"activities:activities-summary\"]?.[\"activities:works\"]?.[\"activities:group\"];\n    if (!works) {\n      console.warn(\"No works found for this ORCID ID.\");\n      return [];\n    }\n\n    // Extract and normalize works data\n    const publications = Array.isArray(works)\n      ? works.flatMap((workGroup) => parseWorkGroup(workGroup))\n      : parseWorkGroup(works);\n\n    console.log(\"Parsed Publications:\", publications); // Debugging\n    return publications;\n  } catch (error) {\n    console.error(\"Error fetching or parsing XML:\", error.message);\n    throw new Error(\"Failed to fetch or parse publications. Please check the ORCID ID.\");\n  }\n}\n\n// Helper function to parse a single work group\nfunction parseWorkGroup(workGroup) {\n  const summaries = Array.isArray(workGroup[\"work:work-summary\"])\n    ? workGroup[\"work:work-summary\"]\n    : [workGroup[\"work:work-summary\"]];\n\n  return summaries.map((summary) => ({\n    title: summary?.[\"work:title\"]?.[\"common:title\"] || \"No Title\",\n    authors: \"No Authors\", // Public ORCID data doesn't include authors\n    doi: summary?.[\"common:external-ids\"]?.[\"common:external-id\"]\n      ?.find((id) => id[\"common:external-id-type\"] === \"doi\")?.[\"common:external-id-value\"] || \"\",\n    journal: summary?.[\"work:journal-title\"]?.[\"common:title\"] || \"No Journal\",\n    year: summary?.[\"common:publication-date\"]?.[\"common:year\"] || \"No Year\",\n    volume: summary?.[\"work:volume\"] || \"No Volume\",\n    issue: summary?.[\"work:issue\"] || \"No Issue\",\n    pages: summary?.[\"work:page-range\"] || \"No Pages\",\n    abstract: summary?.[\"common:short-description\"] || \"No Abstract\",\n    publisher: summary?.[\"work:publisher\"]?.[\"common:title\"] || \"No Publisher\",\n  }));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}